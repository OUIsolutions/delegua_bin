import { Atribuir, Chamada } from '@designliquido/delegua/construtos';
import { Aleatorio, Declaracao, EscrevaMesmaLinha, Expressao, FuncaoDeclaracao, Retorna, Var } from '@designliquido/delegua/declaracoes';
import { AnalisadorSemanticoBase } from '@designliquido/delegua/analisador-semantico/analisador-semantico-base';
import { SimboloInterface } from '@designliquido/delegua/interfaces';
import { DiagnosticoAnalisadorSemantico } from '@designliquido/delegua/interfaces/erros';
import { FuncaoHipoteticaInterface } from '@designliquido/delegua/interfaces/funcao-hipotetica-interface';
import { RetornoAnalisadorSemantico } from '@designliquido/delegua/interfaces/retornos/retorno-analisador-semantico';
import { VariavelHipoteticaInterface } from '@designliquido/delegua/interfaces/variavel-hipotetica-interface';
import { PilhaVariaveis } from './pilha-variaveis';
import { RetornoQuebra } from '@designliquido/delegua/quebras';
export declare class AnalisadorSemanticoVisuAlg extends AnalisadorSemanticoBase {
    pilhaVariaveis: PilhaVariaveis;
    variaveis: {
        [nomeVariavel: string]: VariavelHipoteticaInterface;
    };
    funcoes: {
        [nomeFuncao: string]: FuncaoHipoteticaInterface;
    };
    atual: number;
    diagnosticos: DiagnosticoAnalisadorSemantico[];
    constructor();
    erro(simbolo: SimboloInterface, mensagem: string): void;
    aviso(simbolo: SimboloInterface, mensagem: string): void;
    visitarExpressaoDeAtribuicao(expressao: Atribuir): Promise<void>;
    private gerarNumeroAleatorio;
    private encontrarLeiaNoAleatorio;
    private atualizarVariavelComValorAleatorio;
    private palavraAleatoriaCom5Digitos;
    visitarDeclaracaoAleatorio(declaracao: Aleatorio): Promise<any>;
    visitarDeclaracaoVar(declaracao: Var): Promise<any>;
    visitarDeclaracaoDeExpressao(declaracao: Expressao): Promise<void>;
    visitarDeclaracaoDefinicaoFuncao(declaracao: FuncaoDeclaracao): Promise<void>;
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): Promise<void>;
    visitarExpressaoDeChamada(expressao: Chamada): Promise<void>;
    visitarExpressaoRetornar(declaracao: Retorna): Promise<RetornoQuebra>;
    analisar(declaracoes: Declaracao[]): RetornoAnalisadorSemantico;
}
//# sourceMappingURL=analisador-semantico-visualg.d.ts.map