"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpretadorComDepuracaoImportacao = void 0;
const caminho = __importStar(require("path"));
const estruturas_1 = require("@designliquido/delegua/estruturas");
const interpretador_1 = require("@designliquido/delegua/interpretador");
const mecanismo_importacao_bibliotecas_1 = __importDefault(require("./mecanismo-importacao-bibliotecas"));
class InterpretadorComDepuracaoImportacao extends interpretador_1.InterpretadorComDepuracao {
    constructor(importador, diretorioBase, funcaoDeRetorno, funcaoDeRetornoMesmaLinha) {
        super(diretorioBase, funcaoDeRetorno, funcaoDeRetornoMesmaLinha);
        this.importador = importador;
    }
    /**
     * Importa um arquivo como módulo.
     * @param declaracao A declaração de importação.
     * @returns Ou um `DeleguaModulo`, ou um dicionário de funções.
     */
    async visitarDeclaracaoImportar(declaracao) {
        const caminhoRelativo = await this.avaliar(declaracao.caminho);
        const caminhoTotal = caminho.join(this.diretorioBase, caminhoRelativo);
        const nomeArquivo = caminho.basename(caminhoTotal);
        if (!caminhoTotal.endsWith('.delegua')) {
            try {
                return await (0, mecanismo_importacao_bibliotecas_1.default)(caminhoRelativo);
            }
            catch (erro) {
                this.erros.push(erro);
                return null;
            }
        }
        const conteudoImportacao = this.importador.importar(caminhoRelativo, false);
        const retornoInterpretador = await this.interpretar(conteudoImportacao.retornoAvaliadorSintatico.declaracoes, true);
        const funcoesChamaveis = this.pilhaEscoposExecucao.obterTodasDeleguaFuncao();
        const declaracoesClasse = this.pilhaEscoposExecucao.obterTodasDeclaracaoClasse();
        if (declaracoesClasse.hasOwnProperty('super')) {
            delete declaracoesClasse['super'];
        }
        const novoModulo = new estruturas_1.DeleguaModulo();
        const chavesFuncoesChamaveis = Object.keys(funcoesChamaveis);
        for (let i = 0; i < chavesFuncoesChamaveis.length; i++) {
            novoModulo.componentes[chavesFuncoesChamaveis[i]] = funcoesChamaveis[chavesFuncoesChamaveis[i]];
        }
        const chavesDeclaracoesClasse = Object.keys(declaracoesClasse);
        for (let i = 0; i < chavesDeclaracoesClasse.length; i++) {
            novoModulo.componentes[chavesDeclaracoesClasse[i]] = declaracoesClasse[chavesDeclaracoesClasse[i]];
        }
        return novoModulo;
    }
}
exports.InterpretadorComDepuracaoImportacao = InterpretadorComDepuracaoImportacao;
//# sourceMappingURL=interpretador-com-depuracao-importacao.js.map