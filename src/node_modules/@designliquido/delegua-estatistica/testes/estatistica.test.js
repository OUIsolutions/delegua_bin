"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const estatistica_1 = require("../estatistica");
// import { covar, max, media, mediana, min, moda } from "../estatistica";
describe('max', () => {
    it('atira exceção se num for nulo', () => {
        expect((0, estatistica_1.max)([null, null, null])).toEqual(0);
    });
    it('retorna -infinito se array for vazio', () => {
        expect((0, estatistica_1.max)([])).toEqual(-Infinity);
    });
    it('calcula o maior valor presente no vetor', () => {
        expect((0, estatistica_1.max)([10, 20, 55])).toEqual(55);
    });
});
describe('min', () => {
    it('atira exceção se num for nulo', () => {
        expect((0, estatistica_1.min)([null, null, null])).toEqual(0);
    });
    it('retorna NaN se array for vazio', () => {
        expect((0, estatistica_1.min)([])).toEqual(Infinity);
    });
    it('calcula o menor valor presente no vetor', () => {
        expect((0, estatistica_1.min)([10, 20, 20, 55])).toEqual(10);
    });
});
describe('mediana', () => {
    it('atira exceção se num for nulo', () => {
        expect((0, estatistica_1.mediana)([null, null, null])).toEqual(null);
    });
    it('retorna NaN se array for vazio', () => {
        expect((0, estatistica_1.mediana)([])).toEqual(NaN);
    });
    it('calcula a mediana', () => {
        expect((0, estatistica_1.mediana)([10, 20, 55])).toEqual(20);
    });
});
describe('moda', () => {
    it('atira exceção se num for nulo', () => {
        expect((0, estatistica_1.moda)([null, null, null])).toEqual([NaN]);
    });
    it('retorna NaN se array for vazio', () => {
        expect((0, estatistica_1.moda)([])).toEqual([]);
    });
    it('retorna array vazio se não há correspondência', () => {
        expect((0, estatistica_1.moda)([10, 20, 55])).toEqual([]);
    });
    it('calcula a moda', () => {
        expect((0, estatistica_1.moda)([10, 20, 20, 55])).toEqual([20]);
    });
});
describe("media", () => {
    //   it('atira exceção se num for nulo', () => {
    //     expect(media([null, 1, null])).toEqual([NaN]);
    //   })
    //   it('retorna NaN se array for vazio', () => {
    //     expect(media([])).toEqual([]);
    //   })
    it('retorna a media', () => {
        expect((0, estatistica_1.media)([1, 2, 3, 4, 5])).toEqual(3);
    });
});
// describe('covar', () => {
//   it('retorna a covariância entre as matrizes', () => {
//     expect(covar([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])).toEqual(2.5)
//   })
//   it('retorna ? se algum dos parametros não for passado', () => {
//     expect(covar([1, 2, null, null, 4, 5], [1, 2, 3, 4, 5])).toEqual(NaN);
//   })
// })
//# sourceMappingURL=estatistica.test.js.map