"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mruv = exports.mrufh = exports.aceleracao = exports.deltaT = exports.deltaS = exports.velocidadeMedia = void 0;
/**
 * Calcula a velocidade média.
 * @param {numero} intervaloDeslocamento Valor do intervalo de deslocamento.
 * @param {numero} intervaloTempo Valor do intervalo de tempo.
 * @returns A velocidade média.
 */
function velocidadeMedia(intervaloDeslocamento, intervaloTempo) {
    return intervaloDeslocamento / intervaloTempo;
}
exports.velocidadeMedia = velocidadeMedia;
/**
 * Calcula o espaço percorrido.
 * @param {number} s0 Valor de s0.
 * @param {number} s  Valor de s.
 * @returns O espaço percorrido.
 */
function deltaS(s0, s) {
    const ds = s - s0;
    return ds;
}
exports.deltaS = deltaS;
/**
 * Calcula o tempo percorrido.
 * @param {number} t0 Valor de t0.
 * @param {number} t Valor de t.
 * @returns O tempo percorrido.
 */
function deltaT(t0, t) {
    const dt = t - t0;
    return dt;
}
exports.deltaT = deltaT;
// Cálculo de aceleração
/**
 * Calcula a aceleração.
 * @param {numero} velocidadeFinal Valor da velocidade final.
 * @param {numero} velocidadeInicial Valor da velocidade inicial.
 * @param {numero} tempoFinal Valor do tempo final.
 * @param {numero} tempoInicial Valor do tempo inicial.
 * @returns
 */
function aceleracao(velocidadeFinal, velocidadeInicial, tempoFinal, tempoInicial) {
    return (velocidadeFinal - velocidadeInicial) / (tempoFinal - tempoInicial);
}
exports.aceleracao = aceleracao;
/**
 * Calcula a função horária da posição (M.R.U).
 * @param {numero} s0 Valor de s0.
 * @param {numero} v Valor de v.
 * @param {numero} t Valor de t.
 * @returns O resultado da função horária da posição.
 */
function mrufh(s0, v, t) {
    t = t + 1;
    const s = new Array();
    let index = 0;
    for (var i = 0; i < t; i++) {
        s[index] = s0 + v * i;
        index++;
    }
    return ["Função: " + s0 + "+(" + v + ")*t" + "<br>" + "Posições: " + s];
}
exports.mrufh = mrufh;
/**
 * Calcula o Movimento Retilíneo Uniformemente Variado.
 * @param {number} s0 Valor de s0.
 * @param {number} s Valor de s.
 * @param {number} a Valor de a.
 * @returns O valor do M.R.U.V.
 */
function mruv(s0, s, a) {
    const vf = new Array();
    const x = new Array();
    let v = new Array();
    let index = 0;
    for (var i = 0; i < s; i++) {
        const v = index;
        vf[index] = Math.sqrt(2 * a * (index - s0));
        x[index] = i;
        index++;
    }
    return vf;
}
exports.mruv = mruv;
//# sourceMappingURL=cinematica.js.map