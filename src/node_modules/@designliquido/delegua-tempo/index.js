"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.textoParaData = exports.horas = exports.minutos = exports.segundos = exports.tempo = void 0;
const excecoes_1 = require("./excecoes");
/**
 * Retorna uma data completa
 */
function tempo() {
    return new Date();
}
exports.tempo = tempo;
/**
 * Retorna os segundos atuais do sistema
 */
function segundos() {
    return new Date().getSeconds();
}
exports.segundos = segundos;
/**
 * Retorna os minutos atuais do sistema
 */
function minutos() {
    return new Date().getMinutes();
}
exports.minutos = minutos;
/**
 * Retorna a hora atual do sistema
 */
function horas() {
    return new Date().getHours();
}
exports.horas = horas;
/**
 * Retorna uma instância de Date do JavaScript da data passada por parâmetro, no formato DD/MM/AAAA.
 * @param {string} dataComoTexto A data a ser convertida como texto, no formato DD/MM/AAAA.
 * @returns A data como um objeto Date to JavaScript.
 */
function textoParaData(dataComoTexto) {
    const regex = /^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/](19|20)\d\d$/;
    if (typeof dataComoTexto !== "string" || !regex.test(dataComoTexto)) {
        throw new excecoes_1.TempoErroEmTempoDeExecucao(null, //TODO: this.simbolo,
        "O parâmetro passado deve ser um texto com a data no formato DD/MM/AAAA. Ex: '01/01/2014'");
    }
    const date = new Date(converterDataPtParaIso(dataComoTexto));
    const timezoneOffset = date.getTimezoneOffset();
    return new Date(date.getTime() + timezoneOffset * 60 * 1000);
}
exports.textoParaData = textoParaData;
function converterDataPtParaIso(date) {
    const day = date.split("/")[0];
    const month = date.split("/")[1];
    const year = date.split("/")[2];
    return `${year}-${month}-${day}`;
}
//# sourceMappingURL=index.js.map