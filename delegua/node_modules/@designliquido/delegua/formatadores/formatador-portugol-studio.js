"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatadorPortugolStudio = void 0;
class FormatadorPortugolStudio {
    constructor(quebraLinha, tamanhoIndentacao = 4) {
        this.quebraLinha = quebraLinha;
        this.tamanhoIndentacao = tamanhoIndentacao;
        this.indentacaoAtual = 0;
        this.codigoFormatado = '';
        this.devePularLinha = true;
        this.deveIndentar = true;
    }
    visitarDeclaracaoTendoComo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoInicioAlgoritmo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoCabecalhoPrograma(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoTupla(expressao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoClasse(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoConst(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoConstMultiplo(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeAtribuicao(expressao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoDeExpressao(declaracao) {
        // throw new Error("Método não implementado");
    }
    visitarDeclaracaoAleatorio(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoDefinicaoFuncao(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}funcao ${declaracao.simbolo.lexema}()${this.quebraLinha}`;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}{${this.quebraLinha}`;
        this.visitarExpressaoFuncaoConstruto(declaracao.funcao);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoEnquanto(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoEscolha(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoEscreva(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}escreva(`;
        for (let argumento of declaracao.argumentos) {
            this.formatarDeclaracaoOuConstruto(argumento);
        }
        this.codigoFormatado += `)${this.quebraLinha}`;
    }
    visitarDeclaracaoFazer(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoImportar(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoPara(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoParaCada(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoSe(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoTente(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoVar(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoVarMultiplo(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAcessoIndiceVariavel(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAcessoElementoMatriz(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAcessoMetodo(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAgrupamento(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAtribuicaoPorIndice(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoBinaria(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoBloco(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoContinua(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeChamada(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDefinirValor(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeleguaFuncao(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeVariavel(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDicionario(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoExpressaoRegular(expressao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoEscrevaMesmaLinha(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFalhar(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFimPara(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFormatacaoEscrita(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFuncaoConstruto(expressao) {
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoCorpo of expressao.corpo) {
            this.formatarDeclaracaoOuConstruto(declaracaoCorpo);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
    }
    visitarExpressaoIsto(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoLeia(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoLeiaMultiplo(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoLiteral(expressao) {
        if (typeof expressao.valor === 'string') {
            this.codigoFormatado += `"${expressao.valor}"`;
            return;
        }
        this.codigoFormatado += `${expressao.valor}`;
    }
    visitarExpressaoLogica(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoRetornar(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoSuper(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoSustar(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoTipoDe(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoUnaria(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoVetor(expressao) {
        throw new Error('Método não implementado');
    }
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto) {
        switch (declaracaoOuConstruto.constructor.name) {
            case 'AcessoIndiceVariavel':
                this.visitarExpressaoAcessoIndiceVariavel(declaracaoOuConstruto);
                break;
            case 'AcessoMetodoOuPropriedade':
                this.visitarExpressaoAcessoMetodo(declaracaoOuConstruto);
                break;
            case 'Agrupamento':
                this.visitarExpressaoAgrupamento(declaracaoOuConstruto);
                break;
            case 'AtribuicaoPorIndice':
                this.visitarExpressaoAtribuicaoPorIndice(declaracaoOuConstruto);
                break;
            case 'Atribuir':
                this.visitarExpressaoDeAtribuicao(declaracaoOuConstruto);
                break;
            case 'Binario':
                this.visitarExpressaoBinaria(declaracaoOuConstruto);
                break;
            case 'Bloco':
                this.visitarExpressaoBloco(declaracaoOuConstruto);
                break;
            case 'Chamada':
                this.visitarExpressaoDeChamada(declaracaoOuConstruto);
                break;
            case 'Classe':
                this.visitarDeclaracaoClasse(declaracaoOuConstruto);
                break;
            case 'Continua':
                this.visitarExpressaoContinua(declaracaoOuConstruto);
                break;
            case 'DefinirValor':
                this.visitarExpressaoDefinirValor(declaracaoOuConstruto);
                break;
            case 'Dicionario':
                this.visitarExpressaoDicionario(declaracaoOuConstruto);
                break;
            case 'Escolha':
                this.visitarDeclaracaoEscolha(declaracaoOuConstruto);
                break;
            case 'Enquanto':
                this.visitarDeclaracaoEnquanto(declaracaoOuConstruto);
                break;
            case 'Escreva':
                this.visitarDeclaracaoEscreva(declaracaoOuConstruto);
                break;
            case 'Expressao':
                this.visitarDeclaracaoDeExpressao(declaracaoOuConstruto);
                break;
            case 'ExpressaoRegular':
                this.visitarExpressaoExpressaoRegular(declaracaoOuConstruto);
                break;
            case 'Falhar':
                this.visitarExpressaoFalhar(declaracaoOuConstruto);
                break;
            case 'Fazer':
                this.visitarDeclaracaoFazer(declaracaoOuConstruto);
                break;
            case 'FuncaoConstruto':
                this.visitarExpressaoFuncaoConstruto(declaracaoOuConstruto);
                break;
            case 'FuncaoDeclaracao':
                this.visitarDeclaracaoDefinicaoFuncao(declaracaoOuConstruto);
                break;
            case 'Importar':
                this.visitarDeclaracaoImportar(declaracaoOuConstruto);
                break;
            case 'Isto':
                this.visitarExpressaoIsto(declaracaoOuConstruto);
                break;
            case 'Leia':
                this.visitarExpressaoLeia(declaracaoOuConstruto);
                break;
            case 'Literal':
                this.visitarExpressaoLiteral(declaracaoOuConstruto);
                break;
            case 'Logico':
                this.visitarExpressaoLogica(declaracaoOuConstruto);
                break;
            case 'Para':
                this.visitarDeclaracaoPara(declaracaoOuConstruto);
                break;
            case 'ParaCada':
                this.visitarDeclaracaoParaCada(declaracaoOuConstruto);
                break;
            case 'Retorna':
                this.visitarExpressaoRetornar(declaracaoOuConstruto);
                break;
            case 'Se':
                this.visitarDeclaracaoSe(declaracaoOuConstruto);
                break;
            case 'Super':
                this.visitarExpressaoSuper(declaracaoOuConstruto);
                break;
            case 'Sustar':
                this.visitarExpressaoSustar(declaracaoOuConstruto);
                break;
            case 'Tente':
                this.visitarDeclaracaoTente(declaracaoOuConstruto);
                break;
            case 'TipoDe':
                this.visitarExpressaoTipoDe(declaracaoOuConstruto);
                break;
            case 'Unario':
                this.visitarExpressaoUnaria(declaracaoOuConstruto);
                break;
            case 'Const':
                this.visitarDeclaracaoConst(declaracaoOuConstruto);
                break;
            case 'Var':
                this.visitarDeclaracaoVar(declaracaoOuConstruto);
                break;
            case 'Variavel':
                this.visitarExpressaoDeVariavel(declaracaoOuConstruto);
                break;
            case 'Vetor':
                this.visitarExpressaoVetor(declaracaoOuConstruto);
                break;
            default:
                console.log(declaracaoOuConstruto.constructor.name);
                break;
        }
    }
    formatar(declaracoes) {
        this.indentacaoAtual = 0;
        this.codigoFormatado = `programa${this.quebraLinha}{${this.quebraLinha}`;
        this.devePularLinha = true;
        this.deveIndentar = true;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracao of declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracao);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `}${this.quebraLinha}`;
        return this.codigoFormatado;
    }
}
exports.FormatadorPortugolStudio = FormatadorPortugolStudio;
//# sourceMappingURL=formatador-portugol-studio.js.map