"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClienteHttp = void 0;
const axios_1 = __importDefault(require("axios"));
const resposta_http_1 = require("./resposta-http");
class ClienteHttp {
    constructor(urlBase = "", tempoMaximo = 5000, cabecalhos = {}) {
        this.instanciaAxios = axios_1.default.create({
            baseURL: urlBase,
            timeout: tempoMaximo,
            headers: cabecalhos
        });
    }
    async requisicaoGet(sufixoUrl, cabecalhos) {
        const respostaAxios = await this.instanciaAxios.get(sufixoUrl, {
            headers: Object.assign({}, cabecalhos)
        });
        return new resposta_http_1.RespostaHttp(respostaAxios.status, respostaAxios.statusText, respostaAxios.data);
    }
    async requisicaoPost(sufixoUrl, corpo, cabecalhos) {
        const respostaAxios = await this.instanciaAxios.post(sufixoUrl, corpo, {
            headers: Object.assign({}, cabecalhos)
        });
        return new resposta_http_1.RespostaHttp(respostaAxios.status, respostaAxios.statusText, respostaAxios.data);
    }
    async requisicaoPut(sufixoUrl, corpo, cabecalhos) {
        const respostaAxios = await this.instanciaAxios.put(sufixoUrl, corpo, {
            headers: Object.assign({}, cabecalhos)
        });
        return new resposta_http_1.RespostaHttp(respostaAxios.status, respostaAxios.statusText, respostaAxios.data);
    }
    async requisicaoDelete(sufixoUrl, cabecalhos) {
        const respostaAxios = await this.instanciaAxios.delete(sufixoUrl, {
            headers: Object.assign({}, cabecalhos)
        });
        return new resposta_http_1.RespostaHttp(respostaAxios.status, respostaAxios.statusText, respostaAxios.data);
    }
    async requisicaoPatch(sufixoUrl, corpo, cabecalhos) {
        const respostaAxios = await this.instanciaAxios.patch(sufixoUrl, corpo, {
            headers: Object.assign({}, cabecalhos)
        });
        return new resposta_http_1.RespostaHttp(respostaAxios.status, respostaAxios.statusText, respostaAxios.data);
    }
}
exports.ClienteHttp = ClienteHttp;
//# sourceMappingURL=cliente-http.js.map