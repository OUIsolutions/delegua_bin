import { AcessoIndiceVariavel, Atribuir, Binario, Construto, ExpressaoRegular, FimPara, FormatacaoEscrita, FuncaoConstruto, Super, TipoDe, Tupla, Unario, Variavel } from '@designliquido/delegua/construtos';
import { Aleatorio, Classe, Const, ConstMultiplo, Expressao, FuncaoDeclaracao, Enquanto, Escolha, Escreva, Fazer, Importar, Para, ParaCada, Se, Tente, Var, VarMultiplo, Bloco, Continua, EscrevaMesmaLinha, Leia, LeiaMultiplo, Retorna, Sustar, Declaracao, CabecalhoPrograma, TendoComo } from '@designliquido/delegua/declaracoes';
import { InicioAlgoritmo } from '@designliquido/delegua/declaracoes/inicio-algoritmo';
import { SimboloInterface, VisitanteComumInterface } from '@designliquido/delegua/interfaces';
import { ContinuarQuebra } from '@designliquido/delegua/quebras';
export declare class FormatadorVisuAlg implements VisitanteComumInterface {
    indentacaoAtual: number;
    quebraLinha: string;
    tamanhoIndentacao: number;
    codigoFormatado: string;
    devePularLinha: boolean;
    deveIndentar: boolean;
    contadorDeclaracaoVar: number;
    retornoFuncaoAtual: SimboloInterface;
    constructor(quebraLinha: string, tamanhoIndentacao?: number);
    visitarDeclaracaoTendoComo(declaracao: TendoComo): void | Promise<any>;
    visitarDeclaracaoInicioAlgoritmo(declaracao: InicioAlgoritmo): any;
    visitarDeclaracaoCabecalhoPrograma(declaracao: CabecalhoPrograma): any;
    visitarDeclaracaoAleatorio(declaracao: Aleatorio): any;
    visitarDeclaracaoClasse(declaracao: Classe): void;
    visitarDeclaracaoConst(declaracao: Const): any;
    visitarDeclaracaoConstMultiplo(declaracao: ConstMultiplo): any;
    visitarExpressaoDeAtribuicao(expressao: Atribuir): void;
    visitarDeclaracaoDeExpressao(declaracao: Expressao): void;
    visitarDeclaracaoDefinicaoFuncao(declaracao: FuncaoDeclaracao): void;
    visitarDeclaracaoEnquanto(declaracao: Enquanto): void;
    visitarDeclaracaoEscolha(declaracao: Escolha): void;
    visitarDeclaracaoEscreva(declaracao: Escreva): void;
    visitarDeclaracaoFazer(declaracao: Fazer): void;
    visitarDeclaracaoImportar(declaracao: Importar): void;
    visitarDeclaracaoPara(declaracao: Para): any;
    visitarDeclaracaoParaCada(declaracao: ParaCada): any;
    visitarDeclaracaoSe(declaracao: Se): void;
    visitarDeclaracaoTente(declaracao: Tente): void;
    visitarDeclaracaoVar(declaracao: Var): any;
    visitarDeclaracaoVarMultiplo(declaracao: VarMultiplo): any;
    visitarExpressaoAcessoIndiceVariavel(expressao: AcessoIndiceVariavel): void;
    visitarExpressaoAcessoElementoMatriz(expressao: any): void;
    visitarExpressaoAcessoMetodo(expressao: any): void;
    visitarExpressaoAgrupamento(expressao: any): any;
    visitarExpressaoAtribuicaoPorIndice(expressao: any): any;
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao: any): any;
    visitarExpressaoBinaria(expressao: Binario): void;
    private formatarBlocoOuVetorDeclaracoes;
    visitarExpressaoBloco(declaracao: Bloco): any;
    visitarExpressaoContinua(declaracao?: Continua): ContinuarQuebra;
    visitarExpressaoDeChamada(expressao: any): void;
    visitarExpressaoDefinirValor(expressao: any): void;
    visitarExpressaoDeleguaFuncao(expressao: any): void;
    visitarExpressaoDeVariavel(expressao: Variavel): void;
    visitarExpressaoDicionario(expressao: any): void;
    visitarExpressaoExpressaoRegular(expressao: ExpressaoRegular): Promise<RegExp>;
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): void;
    visitarExpressaoFalhar(expressao: any): any;
    visitarExpressaoFimPara(declaracao: FimPara): void;
    visitarExpressaoFormatacaoEscrita(declaracao: FormatacaoEscrita): void;
    visitarExpressaoIsto(expressao: any): void;
    visitarExpressaoLeia(expressao: Leia): any;
    visitarExpressaoLeiaMultiplo(expressao: LeiaMultiplo): any;
    visitarExpressaoLiteral(expressao: any): any;
    visitarExpressaoLogica(expressao: any): void;
    visitarExpressaoRetornar(declaracao: Retorna): any;
    visitarExpressaoSuper(expressao: Super): void;
    visitarExpressaoSustar(declaracao?: Sustar): any;
    visitarExpressaoTipoDe(expressao: TipoDe): any;
    visitarExpressaoTupla(expressao: Tupla): Promise<any>;
    visitarExpressaoUnaria(expressao: Unario): void;
    visitarExpressaoFuncaoConstruto(expressao: FuncaoConstruto): void;
    visitarExpressaoVetor(expressao: any): void;
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto: Declaracao | Construto): void;
    formatar(declaracoes: Declaracao[]): string;
}
//# sourceMappingURL=formatador.d.ts.map