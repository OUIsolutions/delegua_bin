import { Atribuir } from '../../construtos';
import { Declaracao, Expressao, Retorna, Var } from '../../declaracoes';
import { SimboloInterface } from '../../interfaces';
import { DiagnosticoAnalisadorSemantico } from '../../interfaces/erros';
import { FuncaoHipoteticaInterface } from '../../interfaces/funcao-hipotetica-interface';
import { RetornoAnalisadorSemantico } from '../../interfaces/retornos/retorno-analisador-semantico';
import { VariavelHipoteticaInterface } from '../../interfaces/variavel-hipotetica-interface';
import { RetornoQuebra } from '../../quebras';
import { AnalisadorSemanticoBase } from '../analisador-semantico-base';
import { PilhaVariaveis } from './../pilha-variaveis';
export declare class AnalisadorSemanticoMapler extends AnalisadorSemanticoBase {
    pilhaVariaveis: PilhaVariaveis;
    variaveis: {
        [nomeVariavel: string]: VariavelHipoteticaInterface;
    };
    funcoes: {
        [nomeFuncao: string]: FuncaoHipoteticaInterface;
    };
    atual: number;
    diagnosticos: DiagnosticoAnalisadorSemantico[];
    constructor();
    erro(simbolo: SimboloInterface, mensagem: string): void;
    aviso(simbolo: SimboloInterface, mensagem: string): void;
    visitarExpressaoDeAtribuicao(expressao: Atribuir): Promise<void>;
    visitarDeclaracaoDeExpressao(declaracao: Expressao): any;
    visitarDeclaracaoVar(declaracao: Var): Promise<any>;
    visitarExpressaoRetornar(declaracao: Retorna): Promise<RetornoQuebra>;
    analisar(declaracoes: Declaracao[]): RetornoAnalisadorSemantico;
}
//# sourceMappingURL=analisador-semantico-mapler.d.ts.map