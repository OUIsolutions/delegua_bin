"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NucleoTraducao = void 0;
const sistemaArquivos = __importStar(require("fs"));
const caminho = __importStar(require("path"));
const tradutores_1 = require("@designliquido/delegua/tradutores");
const nucleo_comum_1 = require("./nucleo-comum");
const tradutor_assemblyscript_1 = require("@designliquido/delegua/tradutores/tradutor-assemblyscript");
const importador_1 = require("./importador");
const lexador_1 = require("@designliquido/delegua/lexador");
const avaliador_sintatico_1 = require("@designliquido/delegua/avaliador-sintatico");
const importador_javascript_1 = require("./importador/importador-javascript");
const visualg_1 = require("@designliquido/visualg");
const tradutores_2 = require("@designliquido/visualg/tradutores");
class NucleoTraducao extends nucleo_comum_1.NucleoComum {
    constructor(funcaoDeRetorno = null, funcaoDeRetornoMesmaLinha = null) {
        super();
        this.comandoTraducao = '';
        this.extensoes = {
            assemblyscript: '.as',
            delegua: '.delegua',
            javascript: '.js',
            js: '.js',
            alg: '.alg',
            visualg: '.alg',
            python: '.py',
            py: '.py',
        };
        this.arquivosAbertos = {};
        this.conteudoArquivosAbertos = {};
        this.funcaoDeRetorno = funcaoDeRetorno || console.log;
        // `process.stdout.write.bind(process.stdout)` é necessário por causa de 
        // https://stackoverflow.com/questions/28874665/node-js-cannot-read-property-defaultencoding-of-undefined
        this.funcaoDeRetornoMesmaLinha = funcaoDeRetornoMesmaLinha || process.stdout.write.bind(process.stdout);
    }
    iniciarTradutor(comandoTraducao) {
        switch (comandoTraducao) {
            case 'delegua-para-assemblyscript':
            case 'delegua-para-as':
                this.importador = new importador_1.Importador(new lexador_1.Lexador(false), new avaliador_sintatico_1.AvaliadorSintatico(false), this.arquivosAbertos, this.conteudoArquivosAbertos, false);
                this.tradutor = new tradutor_assemblyscript_1.TradutorAssemblyScript();
                break;
            case 'delegua-para-js':
            case 'delegua-para-javascript':
                this.importador = new importador_1.Importador(new lexador_1.Lexador(false), new avaliador_sintatico_1.AvaliadorSintatico(false), this.arquivosAbertos, this.conteudoArquivosAbertos, false);
                this.tradutor = new tradutores_1.TradutorJavaScript();
                break;
            case 'delegua-para-py':
            case 'delegua-para-python':
                this.importador = new importador_1.Importador(new lexador_1.Lexador(false), new avaliador_sintatico_1.AvaliadorSintatico(false), this.arquivosAbertos, this.conteudoArquivosAbertos, false);
                this.tradutor = new tradutores_1.TradutorPython();
                break;
            case 'js-para-delegua':
            case 'javascript-para-delegua':
                this.importador = new importador_javascript_1.ImportadorJavaScript();
                this.tradutor = new tradutores_1.TradutorReversoJavaScript();
                break;
            case 'alg-para-delegua':
            case 'visualg-para-delegua':
                this.importador = new importador_1.Importador(new visualg_1.LexadorVisuAlg(), new visualg_1.AvaliadorSintaticoVisuAlg(), this.arquivosAbertos, this.conteudoArquivosAbertos, false);
                this.tradutor = new tradutores_2.TradutorReversoVisuAlg();
                break;
            default:
                throw new Error(`Tradutor '${comandoTraducao}' não implementado.`);
        }
    }
    /**
     * Realiza a tradução do arquivo passado como parâmetro no comando de execução.
     * @param caminhoRelativoArquivo O caminho do arquivo.
     * @param gerarArquivoSaida Se o resultado da tradução deve ser escrito em arquivo.
     *                          Se verdadeiro, os arquivos de saída são escritos no mesmo diretório
     *                          do arquivo passado no primeiro parâmetro.
     */
    traduzirArquivo(caminhoRelativoArquivo, gerarArquivoSaida) {
        var _a;
        const caminhoAbsolutoPrimeiroArquivo = caminho.resolve(caminhoRelativoArquivo);
        const novoDiretorioBase = caminho.dirname(caminhoAbsolutoPrimeiroArquivo);
        this.importador.diretorioBase = novoDiretorioBase;
        const retornoImportador = this.importador.importar(caminhoRelativoArquivo, true);
        let resultado = null;
        if (this.afericaoErros(retornoImportador)) {
            process.exit(65); // Código para erro de avaliação antes da tradução
        }
        resultado = this.tradutor.traduzir(retornoImportador.retornoAvaliadorSintatico.declaracoes);
        if (gerarArquivoSaida) {
            const linguagem = ((_a = this.comandoTraducao) === null || _a === void 0 ? void 0 : _a.split('-')[2]) || '';
            const extensaoAlvo = this.extensoes[linguagem];
            if (extensaoAlvo) {
                ['.delegua', '.js', '.alg'].map((extensao) => {
                    if (caminhoAbsolutoPrimeiroArquivo.includes(extensao)) {
                        sistemaArquivos.writeFile(caminhoAbsolutoPrimeiroArquivo.replace(extensao, `${extensaoAlvo}`), resultado, (erro) => {
                            if (erro)
                                throw erro;
                        });
                        return;
                    }
                });
            }
        }
        this.funcaoDeRetorno(resultado);
    }
}
exports.NucleoTraducao = NucleoTraducao;
//# sourceMappingURL=nucleo-traducao.js.map